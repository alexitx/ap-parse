name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.10'

jobs:
  test:
    name: Test on Python ${{ matrix.python }}
    strategy:
      matrix:
        python: ['3.6', '3.7', '3.8', '3.9', '3.10']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install base dependencies
        run: |
          python3 -m pip install -U pip
          python3 -m pip install -U setuptools wheel

      - name: Install package
        run: python -m pip install .

      - name: Run tests
        run: python -m unittest -v tests

  prepare:
    name: Prepare release
    needs: [test]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install base dependencies
        run: |
          python3 -m pip install -U pip
          python3 -m pip install -U setuptools wheel

      - name: Get version
        id: version
        run: |
          tag_version="${GITHUB_REF#refs/tags/v}"
          project_version="$(python3 setup.py --version)"
          if [ "$tag_version" != "$project_version" ]; then
            echo "Version mismatch"
            echo "GitHub ref: $GITHUB_REF"
            echo "Project version: $project_version"
            exit 1
          fi
          echo "::set-output name=version::$tag_version"

      - name: Get changelog
        id: changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.version.outputs.version }}

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          body: ${{ steps.changelog.outputs.changes }}
          allowUpdates: true
          omitPrereleaseDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

  build_dist:
    name: Build source and wheel distributions
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install base dependencies
        run: |
          python3 -m pip install -U pip
          python3 -m pip install -U setuptools wheel
          python3 -m pip install build

      - name: Install package
        run: python -m pip install .

      - name: Build distribution
        id: build
        run: |
          python3 -m build --sdist --wheel --outdir dist/ .
          echo "::set-output name=wheel::ap_parse-${{ needs.prepare.outputs.version }}-py3-none-any.whl"

      - name: Upload wheel asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: dist/${{ steps.build.outputs.wheel }}
          asset_name: ${{ steps.build.outputs.wheel }}
          asset_content_type: application/x-wheel+zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_TOKEN }}
